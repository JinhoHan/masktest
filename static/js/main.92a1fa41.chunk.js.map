{"version":3,"sources":["components/js/Template.js","components/js/Item.js","components/js/ItemList.js","components/js/SelectedItem.js","components/js/SelectedBox.js","App.js","serviceWorker.js","index.js"],"names":["Template","children","className","Item","this","props","geo","item","getDistanceFromLatLonInKm","handleClick","name","addr","remain_stat","stock_at","lat","lng","Card","onClick","CardTitle","React","Component","ItemList","items","itemList","map","key","code","SelectedItem","mapContainer","document","getElementById","mapOption","center","kakao","maps","LatLng","level","Map","markerPosition","Marker","position","setMap","id","SelectedBox","selectedItem","handleRemove","console","log","App","handleError","error","alert","handleSuccess","coords","latitude","longitude","setState","fetch","then","res","ok","Error","status","json","mask","stores","catch","err","lat1","lng1","lat2","lng2","dLat","getDegreesToRadians","dLon","a","Math","sin","cos","d","atan2","sqrt","toFixed","deg","PI","state","getGeolocation","navigator","geolocation","getCurrentPosition","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.92a1fa41.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Template.css';\r\n\r\nconst Template = ({ children }) => {\r\n    return (\r\n        <main className=\"main\">\r\n            <div className=\"header\">\r\n                <section className=\"header__title\">\r\n                    <span>내 주변 마스크는 어디에?</span>\r\n                </section>\r\n                {/* <div className=\"header__title\">\r\n                    <Nav defaultActiveKey=\"/home\" as=\"ul\">\r\n                        <Nav.Item as=\"li\">\r\n                            <Nav.Link href=\"/home\">리스트</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item as=\"li\">\r\n                            <Nav.Link eventKey=\"link-1\">지도보기</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item as=\"li\">\r\n                            <Nav.Link eventKey=\"link-2\">안내</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item as=\"li\">\r\n                            <Nav.Link className=\"nav-link-button\">재고있음</Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </div> */}\r\n            </div>\r\n            <section className=\"mask-list\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Template;\r\n\r\n\r\n","import React from 'react';\r\nimport '../css/Item.css';\r\n\r\nimport { Card, CardTitle } from 'reactstrap';\r\n\r\nclass Item extends React.Component {\r\n\r\n\t// shouldComponentUpdate(nextProps, nextState) {\r\n\t// \treturn this.props.geo !== nextProps.geo;\r\n\t// }\r\n\r\n    render() {\r\n        // console.log(this.props);\r\n        // const { geo, id, name, addr, remain_stat, stock_at, lat, lng, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n        const { geo, item, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n\r\n        const { name, addr, remain_stat, stock_at, lat, lng } = item;\r\n\r\n        return (\r\n            <div className={`card-item ${remain_stat}`} >\r\n                <Card className={`innerbody ${remain_stat}`} onClick={() => handleClick(item)}>\r\n                    <div className=\"mask_name_distance\">\r\n                        <CardTitle className={`mask_name ${remain_stat}`}>{name}</CardTitle>\r\n\r\n                        <CardTitle className=\"distance\">{getDistanceFromLatLonInKm(geo[0], geo[1], lat, lng)}km</CardTitle>\r\n                    </div>\r\n\r\n                    <CardTitle className={`mask_addr ${remain_stat}`}>{addr}</CardTitle>\r\n                    {/* <CardText>{addr}</CardText> */}\r\n            \r\n                    <CardTitle className={`mask_remain ${remain_stat}`}>\r\n                        <div className={`mask_remain_color ${remain_stat}`}></div>\r\n                        <div className=\"mask_remain_text\">\r\n                            재고 :\r\n                                {remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                (remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                    (remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                        (remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지')))}\r\n                        </div>\r\n                    </CardTitle>\r\n\r\n                    <CardTitle className={`mask_stock ${stock_at === null ? 'none_stock' : 'ok_stock'} ${remain_stat}`}>\r\n                        입고시간 : {stock_at === null ? '입고정보없음' : stock_at}\r\n                    </CardTitle>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport Item from './Item';\r\n\r\nclass ItemList extends React.Component {\r\n\r\n\t// shouldComponentUpdate(nextProps, nextState) {\r\n\t// \treturn this.props.items !== nextProps.items;\r\n\t// }\r\n\r\n    render() {\r\n        // console.log(this.props);\r\n        const { geo, items, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n\r\n        // console.log(items);\r\n\r\n        const itemList = items.map (\r\n            // ({ name, addr, remain_stat, stock_at, lat, lng }, index) => (\r\n            // ({ code, name, addr, remain_stat, stock_at, lat, lng }) => (\r\n            //     <Item\r\n            //         geo={geo}\r\n            //         name={name}\r\n            //         addr={addr}\r\n            //         remain_stat={remain_stat}\r\n            //         stock_at={stock_at}\r\n            //         lat={lat}\r\n            //         lng={lng}\r\n            //         // id={index}\r\n            //         // key={index}\r\n            //         id={code}\r\n            //         key={code}\r\n            //         getDistanceFromLatLonInKm={getDistanceFromLatLonInKm}\r\n            //         handleClick={handleClick} />\r\n            // )\r\n            \r\n            ( item ) => (\r\n                <Item\r\n                    geo={geo}\r\n                    item={item}\r\n                    key={item.code}\r\n                    getDistanceFromLatLonInKm={getDistanceFromLatLonInKm}\r\n                    handleClick={handleClick} />\r\n            )\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                {itemList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemList;","/*global kakao*/\r\nimport React from 'react';\r\n\r\nimport '../css/SelectedItem.css';\r\nimport { Card, CardTitle } from 'reactstrap';\r\n\r\nclass SelectedItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return this.props.id !== nextProps.id;\r\n    // }\r\n\r\n    componentDidMount() {\r\n\r\n        const { lat, lng, remain_stat } = this.props;\r\n\r\n        var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n        mapOption = { \r\n            // center: new kakao.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표\r\n            center: new kakao.maps.LatLng(lat, lng), // 지도의 중심좌표\r\n            level: 3 // 지도의 확대 레벨\r\n        };\r\n\r\n        // 지도를 표시할 div와  지도 옵션으로  지도를 생성합니다\r\n        var map = new kakao.maps.Map(mapContainer, mapOption);\r\n\r\n        // 마커가 표시될 위치입니다 \r\n        // var markerPosition  = new kakao.maps.LatLng(33.450701, 126.570667); \r\n        var markerPosition  = new kakao.maps.LatLng(lat, lng);\r\n\r\n        // 마커를 생성합니다\r\n        var marker = new kakao.maps.Marker({\r\n            position: markerPosition\r\n        });\r\n\r\n        // 마커가 지도 위에 표시되도록 설정합니다\r\n        marker.setMap(map);\r\n\r\n        // // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다\r\n        // var xxx = remain_stat === 'plenty' ? ' 100개 이상' :\r\n        //             (remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n        //                 (remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n        //                     (remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지')));\r\n        // var iwContent = '<div style=\"padding:5px;\">' + xxx + '</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n        //     iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\r\n\r\n        // // 인포윈도우를 생성합니다\r\n        // var infowindow = new kakao.maps.InfoWindow({\r\n        //     content : iwContent,\r\n        //     removable : iwRemoveable\r\n        // });\r\n\r\n        // // 마커에 클릭이벤트를 등록합니다\r\n        // kakao.maps.event.addListener(marker, 'click', function() {\r\n        //     // 마커 위에 인포윈도우를 표시합니다\r\n        //     infowindow.open(map, marker);  \r\n        // });\r\n    }\r\n\r\n    render() {\r\n        const { id, geo, name, addr, remain_stat, stock_at, lat, lng, getDistanceFromLatLonInKm } = this.props;\r\n\r\n        return (\r\n            <div className={`card-item`} >\r\n                <Card className={`innerbody selected-item`}>\r\n                    <CardTitle className={`mask_name`}>{name}</CardTitle>\r\n\r\n                    <CardTitle className=\"distance selected-item\">{getDistanceFromLatLonInKm(geo[0], geo[1], lat, lng)} km</CardTitle>\r\n\r\n                    <CardTitle className={`mask_addr `}>{addr}</CardTitle>\r\n\r\n                    <CardTitle className={`mask_remain`}>\r\n                        <div className={`mask_remain_color`}></div>\r\n                        <div className=\"mask_remain_text\">\r\n                            재고 :\r\n                                {remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                (remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                    (remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                        (remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지')))}\r\n                        </div>\r\n                    </CardTitle>\r\n\r\n                    <CardTitle className={`mask_stock`}>\r\n                        입고시간 : {stock_at === null ? '입고정보없음' : stock_at}\r\n                    </CardTitle>\r\n                </Card>\r\n                <Card id=\"map\" className=\"kakao_map\"></Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedItem;","import React from 'react';\r\nimport '../css/SelectedBox.css';\r\nimport SelectedItem from './SelectedItem';\r\n\r\n\r\nclass SelectedBox extends React.Component {\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return this.props.selectedItem !== nextProps.selectedItem;\r\n    // }\r\n\r\n    render() {\r\n        // const { selectedIndex, geo, items, getDistanceFromLatLonInKm, handleRemove } = this.props;\r\n        const { geo, selectedItem, getDistanceFromLatLonInKm, handleRemove } = this.props;\r\n\r\n        // console.log(items);\r\n        console.log(selectedItem);\r\n\r\n\r\n        // 테스트.\r\n        // const xxx = [\r\n        //     {addr: \"서울특별시 중구 을지로44길 20 (광희동1가)\", code: \"11837152\", created_at: \"2020/03/26 15:55:00\"},\r\n        //     {addr: \"서울특별시 중구 동호로 376 (방산동)\", code: \"11849746\", created_at: \"2020/03/26 15:55:00\"},\r\n        //     {addr: \"서울특별시 중구 을지로 251 1층 (을지로6가)\", code: \"12848735\", created_at: \"2020/03/26 15:55:00\"}\r\n        // ];\r\n        // const yyy = xxx[0];\r\n        // console.log(xxx);\r\n        // console.log(yyy);\r\n        // console.log(yyy.addr);\r\n\r\n        // let selectedItem;\r\n        // if(selectedIndex !== null) {\r\n        //     const selectedList = (items[selectedIndex]);\r\n        //     selectedItem = (\r\n        //         <SelectedItem\r\n        //             geo={geo}\r\n        //             name={selectedList.name}\r\n        //             addr={selectedList.addr}\r\n        //             remain_stat={selectedList.remain_stat}\r\n        //             stock_at={selectedList.stock_at}\r\n        //             lat={selectedList.lat}\r\n        //             lng={selectedList.lng}\r\n        //             id={selectedIndex}\r\n        //             key={selectedIndex}\r\n        //             getDistanceFromLatLonInKm={getDistanceFromLatLonInKm} />\r\n        //     );\r\n        // }\r\n\r\n        return (\r\n            <div>\r\n                <div\r\n                    // className={`item-detail-overlay ${selectedItem !== null ? 'show' : ''}`}\r\n                    className={`item-detail-overlay show`}\r\n                    onClick={handleRemove}>\r\n                </div>\r\n                <div className={`item-detail show`}>\r\n                    <SelectedItem\r\n                        geo={geo}\r\n                        name={selectedItem.name}\r\n                        addr={selectedItem.addr}\r\n                        remain_stat={selectedItem.remain_stat}\r\n                        stock_at={selectedItem.stock_at}\r\n                        lat={selectedItem.lat}\r\n                        lng={selectedItem.lng}\r\n                        id={selectedItem.code}\r\n                        key={selectedItem.code}\r\n                        getDistanceFromLatLonInKm={getDistanceFromLatLonInKm} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedBox;","import React from 'react';\r\nimport Template from './components/js/Template';\r\nimport ItemList from './components/js/ItemList';\r\nimport SelectedBox from './components/js/SelectedBox';\r\n\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tgeo: [],\r\n\t\t\titems: [],\r\n\t\t\t// selectedIndex: null\r\n\t\t\tselectedItem : null\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getGeolocation();\r\n\t}\r\n\r\n\tgetGeolocation() {\r\n\t\tif (!navigator.geolocation) {\r\n\t\t\talert(\"현재위치찾기를 지원하지 않는 브라우저 입니다. 혹은 설정에서 위치정보 접근 권한을 허용해주세요\");\r\n\t\t} else {\r\n\t\t\tnavigator.geolocation.getCurrentPosition(this.handleSuccess, this.handleError);\r\n\t\t}\r\n\t}\r\n\r\n\thandleError = (error) => {\r\n\t\tconsole.log(error.code);\r\n\t\talert(\"현재위치를 받아오는데 실패했습니다\");\r\n\t}\r\n\r\n\thandleSuccess = (position) => {\r\n\t\tconst geo = [position.coords.latitude, position.coords.longitude];\r\n\t\tconst latitude = geo[0];\r\n\t\tconst longitude = geo[1];\r\n\t\tconsole.log(latitude + \" ::: \" + longitude);\r\n\t\tthis.setState({ geo: geo });\r\n\r\n\t\tconst url = \"https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?lat=\" + latitude + \"&lng=\" + longitude + \"&m=1000\";\r\n\t\t// console.log(url);\r\n\r\n\t\tfetch(url)\r\n\t\t\t.then(res => {\r\n\t\t\t\tif (!res.ok) {\r\n\t\t\t\t\tthrow new Error(res.status);\r\n\t\t\t\t}\r\n\t\t\t\treturn res.json();\r\n\t\t\t})\r\n\t\t\t// .then(mask => console.log(mask.stores))\r\n\t\t\t.then(mask => this.setState({ items: mask.stores }))\t\t// this.setState 가 계속 에러나서... let self = this; 를 받고 this 대신에 self 사용.\r\n\t\t\t.catch(err => console.log(err))\r\n\t}\r\n\r\n\tgetDistanceFromLatLonInKm = (lat1, lng1, lat2, lng2) => {\r\n\t\tconst R = 6371; // Radius of the earth in km\r\n\t\tconst dLat = this.getDegreesToRadians(lat2 - lat1);  // degreesToRadians below\r\n\t\tconst dLon = this.getDegreesToRadians(lng2 - lng1);\r\n\t\tconst a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.getDegreesToRadians(lat1)) * Math.cos(this.getDegreesToRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n\t\tconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\t\tlet d = R * c; // Distance in km\r\n\t\td = d.toFixed(2);\r\n\t\treturn d;\r\n\t}\r\n\r\n\tgetDegreesToRadians = (deg) => {\r\n\t\treturn deg * (Math.PI / 180);\r\n\t}\r\n\r\n\thandleClick = (item) => {\r\n\t\tconsole.log(item);\r\n\t\tthis.setState({ selectedItem: item });\r\n\t}\r\n\r\n\thandleRemove = () => {\r\n\t\tthis.setState({ selectedItem: null });\r\n\t}\r\n\r\n\trender() {\r\n\t\t// console.log(this.state.items);\r\n\t\treturn (\r\n\t\t\t<Template>\r\n\t\t\t\t<ItemList\r\n\t\t\t\t\tgeo={this.state.geo}\r\n\t\t\t\t\titems={this.state.items}\r\n\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\r\n\t\t\t\t\thandleClick={this.handleClick} />\r\n\t\t\t\t{this.state.selectedItem && <SelectedBox\r\n\t\t\t\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\r\n\t\t\t\t\t\t\t\t\t\t\t\tselectedItem={this.state.selectedItem}\r\n\t\t\t\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\r\n\t\t\t\t\t\t\t\t\t\t\t\t// selectedIndex={this.state.selectedIndex}\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleRemove={this.handleRemove} />\r\n\t\t\t\t}\r\n\t\t\t</Template>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}